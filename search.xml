<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>链栈的实现</title>
      <link href="2021/05/10/%E9%93%BE%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2021/05/10/%E9%93%BE%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="链栈的实现"><a href="#链栈的实现" class="headerlink" title="链栈的实现"></a>链栈的实现</h1><p>​    采用链式存储的栈成为链栈，链栈的优点是便于多个栈共享存储空间和提高效率，且不存在栈满上溢的情况（此处注意：后面代码将不考虑栈满的问题）。</p><p>​    通常采用单链表实现，并规定所有的操作实在单链表的表头进行的。这里我们所示代码是不含头结点!</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*    链栈的操作    2021年5月10日14:19:44*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token comment">//初始化</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Linknode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Linknode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span>LiStack<span class="token punctuation">;</span><span class="token comment">//建立</span>bool <span class="token function">Found</span><span class="token punctuation">(</span>LiStack <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已建立\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判空</span>bool <span class="token function">Empty</span><span class="token punctuation">(</span>LiStack L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"为空\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//增（进栈）</span>bool <span class="token function">Push</span><span class="token punctuation">(</span>LiStack <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Linknode <span class="token operator">*</span>s<span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>LiStack<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Linknode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"无法申请\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token operator">-></span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>s<span class="token operator">-></span>next <span class="token operator">=</span> L<span class="token punctuation">;</span>L <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已增加\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//删（出栈）</span>bool <span class="token function">Pop</span><span class="token punctuation">(</span>LiStack <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Empty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"无法删除\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//栈空，无法删除</span><span class="token punctuation">&#125;</span>Linknode <span class="token operator">*</span>s<span class="token punctuation">;</span>x <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">;</span>s <span class="token operator">=</span> L<span class="token punctuation">;</span>L <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已删除\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//查</span>bool <span class="token function">Examine</span><span class="token punctuation">(</span>LiStack L<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Empty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"无法查找\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//栈空，无法查找</span><span class="token punctuation">&#125;</span>x <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"查找栈顶元素 = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化</span>   LiStack L<span class="token punctuation">;</span>     <span class="token comment">//创建</span>   <span class="token function">Found</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//以下代码均为测试代码</span><span class="token comment">//判空</span>   <span class="token function">Empty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//增、查</span>   <span class="token function">Push</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>   <span class="token function">Examine</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Push</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Examine</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//删、查</span>   <span class="token keyword">int</span> c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>   <span class="token function">Pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Examine</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> e<span class="token punctuation">;</span>   <span class="token function">Pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Empty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在VC-6-0中的实验结果为："><a href="#在VC-6-0中的实验结果为：" class="headerlink" title="在VC++6.0中的实验结果为："></a>在VC++6.0中的实验结果为：</h2><pre class="line-numbers language-none"><code class="language-none">已建立为空已增加查找栈顶元素 &#x3D; 5已增加查找栈顶元素 &#x3D; 7已删除查找栈顶元素 &#x3D; 5已删除为空Press any key to continue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h3><p>本实验是根据王道考研数据结构链栈来自行编写的代码，实验过程中所经历的一系列bug让我所获甚多，同时，引用王道考研咸鱼老师所说：学习相当于输入，考试相当于输出，我们一定要自己动手去做，才能真正加强输出！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 考研数据结构链栈的实现 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
