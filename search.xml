<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>链队列的实现</title>
      <link href="2021/05/14/%E9%93%BE%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2021/05/14/%E9%93%BE%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="链队列的实现"><a href="#链队列的实现" class="headerlink" title="链队列的实现"></a>链队列的实现</h1><h2 id="一、队列的链式存储"><a href="#一、队列的链式存储" class="headerlink" title="一、队列的链式存储"></a>一、队列的链式存储</h2><p>​    队列的链式存储表示称为<strong>链队列</strong>，它实际上是一个同时带有队头指针和队尾指针的单链表。其代码实现可分为带头结点和不带头结点两种。</p><h2 id="二、带头结点的链队列的实现"><a href="#二、带头结点的链队列的实现" class="headerlink" title="二、带头结点的链队列的实现"></a>二、带头结点的链队列的实现</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*带头结点的链队列2021年5月14日00:44:52*/</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token comment">//定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LinkNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>LinkNode <span class="token operator">*</span>front<span class="token punctuation">,</span> <span class="token operator">*</span>rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LinkQueue<span class="token punctuation">;</span><span class="token comment">//初始化</span><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//初始时，front、rear都指向头结点</span>Q<span class="token punctuation">.</span>front <span class="token operator">=</span> Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判空</span>bool <span class="token function">IsEmpty</span><span class="token punctuation">(</span>LinkQueue Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"为空\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"非空\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//入队</span><span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>LinkNode <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">-></span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>s<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>Q<span class="token punctuation">.</span>rear<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//出队</span>bool <span class="token function">DeQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队空，无法出队\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>x <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">==</span> p<span class="token punctuation">)</span>Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//查询</span>bool <span class="token function">GetTop</span><span class="token punctuation">(</span>LinkQueue Q<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>x <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token operator">-></span>data<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队首元素 = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//声明</span>LinkQueue Q<span class="token punctuation">;</span><span class="token comment">//初始化</span><span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token function">GetTop</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token function">GetTop</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">;</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> e<span class="token punctuation">;</span><span class="token function">GetTop</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、在VC6-0-中的结果为"><a href="#三、在VC6-0-中的结果为" class="headerlink" title="三、在VC6.0++中的结果为"></a>三、在VC6.0++中的结果为</h2><pre class="line-numbers language-none"><code class="language-none">为空非空队首元素 &#x3D; 1非空非空队首元素 &#x3D; 2非空非空队首元素 &#x3D; 3Press any key to continue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、不带头结点的链队列的实现"><a href="#四、不带头结点的链队列的实现" class="headerlink" title="四、不带头结点的链队列的实现"></a>四、不带头结点的链队列的实现</h2><p>​    与带头结点的初始化相同，不同之处在以下代码实现</p><h3 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   Q<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、判空"><a href="#2、判空" class="headerlink" title="2、判空"></a>2、判空</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">IsEmpty</span><span class="token punctuation">(</span>LinkQueue Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、入队"><a href="#3、入队" class="headerlink" title="3、入队"></a>3、入队</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkNode <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>    s<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Q<span class="token punctuation">.</span>front <span class="token operator">=</span> s<span class="token punctuation">;</span>        Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        Q<span class="token punctuation">.</span>rear<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、出队"><a href="#4、出队" class="headerlink" title="4、出队"></a>4、出队</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">DeQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    LinkNode <span class="token operator">*</span>p <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span>    x <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">==</span> p<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Q<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 考研数据结构链队列的实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序栈的实现</title>
      <link href="2021/05/13/%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2021/05/13/%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="顺序栈的实现"><a href="#顺序栈的实现" class="headerlink" title="顺序栈的实现"></a>顺序栈的实现</h1><h2 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h2><p>​    栈（Stack）是只允许在一端进行插入或者删除的线性表。首先栈是一种线性表，但限定这种线性表只能在某一端进行插入和删除操作</p><h2 id="二、顺序栈"><a href="#二、顺序栈" class="headerlink" title="二、顺序栈"></a>二、顺序栈</h2><p>​    采用顺序存储的栈称为顺序栈，它利用一组地址连续的存储单元存放自栈底到栈顶的数据元素，同时附设一个指针指示当前栈顶元素的位置</p><h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token comment">//栈的定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SqStack<span class="token punctuation">;</span><span class="token comment">//栈的初始化</span><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    S<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//入栈</span>bool <span class="token function">Push</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">==</span> MaxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>top <span class="token operator">=</span> S<span class="token punctuation">.</span>top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//出栈</span>bool <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack<span class="token operator">&amp;</span> S<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    x <span class="token operator">=</span> S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    S<span class="token punctuation">.</span>top <span class="token operator">=</span> S<span class="token punctuation">.</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判空</span>bool <span class="token function">StackEmpty</span><span class="token punctuation">(</span>SqStack S<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"true\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"false\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">//读取栈顶元素</span>bool <span class="token function">GetTop</span><span class="token punctuation">(</span>SqStack S<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> false<span class="token punctuation">;</span>     x <span class="token operator">=</span> S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SqStack S<span class="token punctuation">;</span><span class="token function">InitStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">StackEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">StackEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token function">GetTop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token function">GetTop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、在VC6-0-中结果为"><a href="#四、在VC6-0-中结果为" class="headerlink" title="四、在VC6.0++中结果为"></a>四、在VC6.0++中结果为</h2><pre class="line-numbers language-none"><code class="language-none">truefalse01Press any key to continue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 考研数据结构之顺序栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环队列的实现</title>
      <link href="2021/05/12/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2021/05/12/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="循环队列的实现"><a href="#循环队列的实现" class="headerlink" title="循环队列的实现"></a>循环队列的实现</h1><h2 id="1、队列"><a href="#1、队列" class="headerlink" title="1、队列"></a>1、队列</h2><p>​    队列简称对，也是一种操作受限的线性表，只允许表的一端进行插入，而在表的另一端进行删除。其操作特性是先进先出（FIFO）</p><h2 id="2、循环队列"><a href="#2、循环队列" class="headerlink" title="2、循环队列"></a>2、循环队列</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*循环队列2021年5月11日23:03:45*/</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token comment">//队列定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> front<span class="token punctuation">,</span>rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SqQueue<span class="token punctuation">;</span><span class="token comment">//队列初始化</span><span class="token keyword">void</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> Q<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//队列判空</span>bool <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">==</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"对空\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"对非空\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//队列判满</span>bool <span class="token function">QueueFull</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span>MaxSize <span class="token operator">==</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"对满\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"对未满\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//队列长度</span><span class="token keyword">int</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">-</span> Q<span class="token punctuation">.</span>front <span class="token operator">+</span> MaxSize<span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//入队</span>bool <span class="token function">EnQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">QueueFull</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//对满</span>Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//出队</span>bool <span class="token function">DeQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//对空</span>x <span class="token operator">=</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>Q<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//查</span>bool <span class="token function">GetHead</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//对空</span>x <span class="token operator">=</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"对首元素 = %d \n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//定义</span>SqQueue Q<span class="token punctuation">;</span><span class="token comment">//初始化</span><span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判空</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入队</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查</span><span class="token keyword">int</span> d<span class="token punctuation">;</span><span class="token function">GetHead</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出栈</span><span class="token keyword">int</span> e<span class="token punctuation">,</span>f<span class="token punctuation">;</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">GetHead</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求对长</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"对长 = %d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在VC6-0-中输出结果为"><a href="#在VC6-0-中输出结果为" class="headerlink" title="在VC6.0++中输出结果为"></a>在VC6.0++中输出结果为</h2><pre class="line-numbers language-none"><code class="language-none">对空对未满对非空对未满对未满对非空对首元素 &#x3D; 0对非空对非空对首元素 &#x3D; 1对长 &#x3D; 2Press any key to continue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、说明"><a href="#3、说明" class="headerlink" title="3、说明"></a>3、说明</h2><p>​    在判断对空、对满时，此代码给出方案是牺牲了一个存储单元，下面给出其他两种不牺牲存储单元的方法</p><h3 id="1、类型中增设表示元素个数的数据成员"><a href="#1、类型中增设表示元素个数的数据成员" class="headerlink" title="1、类型中增设表示元素个数的数据成员"></a>1、类型中增设表示元素个数的数据成员</h3><p>​    即在<code>typedef</code>中增加<code>int size</code>，对空条件为<code>Q.size == 0</code>；对满条件为<code>Q.size == MaxSize</code>，这两种情况下<code>Q.front = =Q.rear</code></p><h3 id="2、类型中增设tag数据成员"><a href="#2、类型中增设tag数据成员" class="headerlink" title="2、类型中增设tag数据成员"></a>2、类型中增设tag数据成员</h3><p>​    以区分对满还是对空。删除时<code>tag = 0</code>,插入时<code>tag = 1</code>，则tag等于0时，若因删除导致<code>Q.front == Q.rear</code>，为对空；</p><p>tag等于1时，若因插入导致<code>Q.front == Q.rear</code>，则为对满。</p><p>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> 考研数据结构循环队列的实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链栈的实现</title>
      <link href="2021/05/10/%E9%93%BE%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2021/05/10/%E9%93%BE%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="链栈的实现"><a href="#链栈的实现" class="headerlink" title="链栈的实现"></a>链栈的实现</h1><p>​    采用链式存储的栈成为链栈，链栈的优点是便于多个栈共享存储空间和提高效率，且不存在栈满上溢的情况（此处注意：后面代码将不考虑栈满的问题）。</p><p>​    通常采用单链表实现，并规定所有的操作实在单链表的表头进行的。这里我们所示代码是不含头结点!</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*    链栈的操作    2021年5月10日14:19:44*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token comment">//初始化</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Linknode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Linknode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span>LiStack<span class="token punctuation">;</span><span class="token comment">//建立</span>bool <span class="token function">Found</span><span class="token punctuation">(</span>LiStack <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已建立\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判空</span>bool <span class="token function">Empty</span><span class="token punctuation">(</span>LiStack L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"为空\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//增（进栈）</span>bool <span class="token function">Push</span><span class="token punctuation">(</span>LiStack <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Linknode <span class="token operator">*</span>s<span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>LiStack<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Linknode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"无法申请\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token operator">-></span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>s<span class="token operator">-></span>next <span class="token operator">=</span> L<span class="token punctuation">;</span>L <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已增加\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//删（出栈）</span>bool <span class="token function">Pop</span><span class="token punctuation">(</span>LiStack <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Empty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"无法删除\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//栈空，无法删除</span><span class="token punctuation">&#125;</span>Linknode <span class="token operator">*</span>s<span class="token punctuation">;</span>x <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">;</span>s <span class="token operator">=</span> L<span class="token punctuation">;</span>L <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已删除\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//查</span>bool <span class="token function">Examine</span><span class="token punctuation">(</span>LiStack L<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Empty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"无法查找\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//栈空，无法查找</span><span class="token punctuation">&#125;</span>x <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"查找栈顶元素 = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化</span>   LiStack L<span class="token punctuation">;</span>     <span class="token comment">//创建</span>   <span class="token function">Found</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//以下代码均为测试代码</span><span class="token comment">//判空</span>   <span class="token function">Empty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//增、查</span>   <span class="token function">Push</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>   <span class="token function">Examine</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Push</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Examine</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//删、查</span>   <span class="token keyword">int</span> c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>   <span class="token function">Pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Examine</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> e<span class="token punctuation">;</span>   <span class="token function">Pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Empty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在VC-6-0中的实验结果为："><a href="#在VC-6-0中的实验结果为：" class="headerlink" title="在VC++6.0中的实验结果为："></a>在VC++6.0中的实验结果为：</h2><pre class="line-numbers language-none"><code class="language-none">已建立为空已增加查找栈顶元素 &#x3D; 5已增加查找栈顶元素 &#x3D; 7已删除查找栈顶元素 &#x3D; 5已删除为空Press any key to continue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h3><p>本实验是根据王道考研数据结构链栈来自行编写的代码，实验过程中所经历的一系列bug让我所获甚多，同时，引用王道考研咸鱼老师所说：学习相当于输入，考试相当于输出，我们一定要自己动手去做，才能真正加强输出！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 考研数据结构链栈的实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10+Windows7+WinDBG+符号表的双机调试</title>
      <link href="2021/04/24/Windows10-Windows7-WinDBG-%E7%AC%A6%E5%8F%B7%E8%A1%A8%E7%9A%84%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/"/>
      <url>2021/04/24/Windows10-Windows7-WinDBG-%E7%AC%A6%E5%8F%B7%E8%A1%A8%E7%9A%84%E5%8F%8C%E6%9C%BA%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows10-Windows7-WinDBG-符号表的双机调试"><a href="#Windows10-Windows7-WinDBG-符号表的双机调试" class="headerlink" title="Windows10+Windows7+WinDBG+符号表的双机调试"></a>Windows10+Windows7+WinDBG+符号表的双机调试</h1><h2 id="一、实验环境"><a href="#一、实验环境" class="headerlink" title="一、实验环境"></a>一、实验环境</h2><p>​    VMWare Workstation 15 PRO</p><p>​    Windows7（虚拟机）</p><p>​    Windows10（主机，调试机）</p><p>​     WinDBG（调试工具）</p><h2 id="二、虚拟机设置"><a href="#二、虚拟机设置" class="headerlink" title="二、虚拟机设置"></a>二、虚拟机设置</h2><h3 id="2-1虚拟机开机前配置"><a href="#2-1虚拟机开机前配置" class="headerlink" title="2.1虚拟机开机前配置"></a>2.1虚拟机开机前配置</h3><p>​    配置串口，【虚拟机】——&gt;【设置】,删除打印机，扫描仪等设备,否在会导致WinDBG与虚拟机连接不上！</p><img src="https://i.bmp.ovh/imgs/2021/04/32b5574e9a1df5a5.png" style="zoom:50%;" /><p>​    添加串行端口<code>\\.\pipe\com_1</code> 【添加】——&gt;【串行端口】——&gt;【完成】，在创建完成会进入串行端口的设置，设置    如下图，注意勾选上【轮询时主动放弃】，点击【确定】<img src="https://i.bmp.ovh/imgs/2021/04/a1e639341a5146f2.png" style="zoom:67%;" /></p><h3 id="2-2打开虚拟机配置"><a href="#2-2打开虚拟机配置" class="headerlink" title="2.2打开虚拟机配置"></a>2.2打开虚拟机配置</h3><p>​    1、打开Windows7虚拟机，在Win图标搜索cmd,右键，以管理员方式打开（注意：一定需要管理员）</p><img src="https://i.bmp.ovh/imgs/2021/04/8ecb5b2d6814ac2f.png" style="zoom:67%;" /><p>​    2、输入<code>bcdedit</code></p><img src="https://i.bmp.ovh/imgs/2021/04/bb0112d340ea4ded.png" style="zoom:67%;" /><p>​    3、设置端口1，命令如下：</p><p><code>bcdedit /dbgsettings serial baudrate:115200 debugport:1</code>   //注意：该处的“1”，对应com口1。</p><p><img src="https://i.bmp.ovh/imgs/2021/04/f7cefa4456b59947.png"></p><p>​    4、复制一个开机选项，命名为“DebugEntry”，可任意命名。命令如下：</p><p><code>bcdedit /copy &#123;current&#125; /d DebugEntry</code> </p><p><img src="https://i.bmp.ovh/imgs/2021/04/d23a241b281f1f99.png"></p><p>​    5、增加一个开机引导项</p><p><code>bcdedit /displayorder &#123;current&#125; &#123;ID&#125;</code>  //此处ID为上面得到的{}里面的字符</p><p><img src="https://i.bmp.ovh/imgs/2021/04/b9ed5f1ae5c2b9c7.png"></p><p>​    6、激活debug</p><p><code>bcdedit /debug &#123;ID&#125; ON</code>  //ID同上</p><p><img src="https://i.bmp.ovh/imgs/2021/04/42a8b777107b036c.png"></p><h2 id="三、WinDBG配置"><a href="#三、WinDBG配置" class="headerlink" title="三、WinDBG配置"></a>三、WinDBG配置</h2><p>​    1、给WinDBG创建桌面快捷方式，右键——&gt;【属性】，在【目标】后面加一个空格，填入</p><p><code>-b -k com:pipe,port=\\.\pipe\com_1,resets=0</code></p><p>​    再点击确定。</p><img src="https://i.bmp.ovh/imgs/2021/04/87934700e5160d4f.png" style="zoom:67%;" /><h2 id="四、双机调试"><a href="#四、双机调试" class="headerlink" title="四、双机调试"></a>四、双机调试</h2><p>​    1、重启Windows7虚拟机，在虚拟机关机的同时以管理员方式打开WinDBG，虚拟机启动后选择【DebugEntry】</p><img src="https://i.bmp.ovh/imgs/2021/04/9f2030dd9ac19b80.png" style="zoom: 50%;" /><p>​    2、在WinDBG如图位置输入g，使Windows7虚拟机继续运行，进入系统</p><img src="https://i.loli.net/2021/04/20/l3C7e68OuLcHnTS.png"  style="zoom:67%;" /><p>​    3、选择菜单项的【File】——&gt;【Symbol File Path】,然后填下：</p><p><code>srv*c:\Symbols*http://msdl.microsoft.com/download/symbols</code> </p><p>​    勾选【Reload】，点击【OK】开始下载</p><p><img src="https://i.loli.net/2021/04/20/c3uTbjaZI8tsKkp.png"></p><p>​    4、此时，就会下载符号表,注意：下载速度缓慢甚至失败，多尝试几次，下载完成之后在C:\symbols会有下载的符号表</p><h4 id="注意：若WinDBG一直busy，Ctrl-break中断就行"><a href="#注意：若WinDBG一直busy，Ctrl-break中断就行" class="headerlink" title="注意：若WinDBG一直busy，Ctrl+break中断就行"></a>注意：若WinDBG一直busy，Ctrl+break中断就行</h4><p>​    5、在WinDBG输入<code>！process 0 0</code>，可以看到虚拟机正在运行的进程</p><p><img src="https://i.loli.net/2021/04/20/RaEmPf9wOlItvjq.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机病毒实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7搭建自己的博客hexo + Github +域名</title>
      <link href="2021/01/18/Centos7%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2hexo-Github-%E5%9F%9F%E5%90%8D/"/>
      <url>2021/01/18/Centos7%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2hexo-Github-%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos7搭建自己的博客hexo-Github-域名"><a href="#Centos7搭建自己的博客hexo-Github-域名" class="headerlink" title="Centos7搭建自己的博客hexo + Github +域名"></a>Centos7搭建自己的博客hexo + Github +域名</h1><p>  个人博客可以帮助我们记下我们所学到的东西，再也不用在繁琐的文件夹中寻找以前的文件。最近，我花费了好几天的时间才搭建好自己的博客，这其中的辛酸真的是一言难尽，大概搭建博客的所有问题可能全被我遇到了吧！当然，这里要感谢一下我江的帮助，只能说一句：大佬牛逼！</p><h2 id="一、注册GitHub账号并创建仓库"><a href="#一、注册GitHub账号并创建仓库" class="headerlink" title="一、注册GitHub账号并创建仓库"></a>一、注册GitHub账号并创建仓库</h2><p>首先我们注册一个GitHub账号：</p><p>​       登录GitHub官网：</p><p><a href="https://github.com/">Github</a></p><p> 然后我们进入Github页面，点击右上角+ 号 ——&gt;new repository</p><p><img src="https://ftp.bmp.ovh/imgs/2021/01/1d49683c99b5d521.png"></p><p>最后点击最下面create repository创建仓库</p><h2 id="二、下载node-js和npm"><a href="#二、下载node-js和npm" class="headerlink" title="二、下载node.js和npm"></a>二、下载node.js和npm</h2><p>1、以下均为命令行，如果不是root用户，可以在代码前加sudo或者先su进入root用户</p><p><code>yum install nodejs</code></p><p>2、然后你就安装完node.js和npm了,没错就是这么简单。然后再查看一下版本信息，看看是不是安装完成</p><p><code>node -v</code><br><code>npm -v</code></p><p>3、这个node版本可能会过低，然后我们升级一下</p><p><code>npm install -g n</code><br><code>n lastest   #最新版本    stable最稳定版本     n还可以指明自己需要的版本</code><br><code>n           #切换版本  up/down选择   d删除</code></p><p>4、再查看一下新的node.js版本</p><p><code>node -v</code><br><code>reboot   #重启一下才能生效</code></p><h2 id="三、安装Git"><a href="#三、安装Git" class="headerlink" title="三、安装Git"></a>三、安装Git</h2><p><code>apt-get install git</code><br><code>git --version   #查看当前版本，确保安装成功</code></p><p>​        安装完成之后，我们将git绑定一下全局</p><p><code>git config --global user.name &quot;GitHub账户名&quot;</code><br><code>git config --global user.email &quot;Github绑定的邮箱&quot;</code></p><h2 id="四、安装hexo框架"><a href="#四、安装hexo框架" class="headerlink" title="四、安装hexo框架"></a>四、安装hexo框架</h2><p>   百度搜索一下hexo,进入官方网站</p><p><a href="https://hexo.io/">点击进入hexo</a></p><p>   然后可以根据官方教程去做，我这里给出自己的方法</p><p><code>mkdir blog   #创建文件夹</code><br><code>cd blog</code></p><p>​    再安装hexo框架</p><p><code>npm install -g hexo-cli</code></p><p>​     继续用<code>hexo -v</code>查看一下版本，看是否正确安装hexo</p><p>​     接着我们就可以初始化一下hexo(这里我们直接初始化在blog文件夹中)</p><p><code>hexo init</code><br><code>npm install</code><br><code>npm install hexo-deployer-git --save   #安装git插件</code></p><h2 id="五、本地生成博客"><a href="#五、本地生成博客" class="headerlink" title="五、本地生成博客"></a>五、本地生成博客</h2><p><code>hexo g  #生成静态页面</code><br><code>hexo s  #开启服务</code></p><p>​         默认开启端口4000，我们在电脑网页端输入localhost:4000,如果显示一下界面则表示已经成功了一部分</p><p><img src="https://ftp.bmp.ovh/imgs/2021/01/ddc20bb5a9d35f7c.png"></p><h2 id="六、免密登录"><a href="#六、免密登录" class="headerlink" title="六、免密登录"></a>六、免密登录</h2><p>​            我们切换目录到/root下，然后用ssh免密</p><p><code>ssh-keygen -t rsa -C “Github的邮箱”</code><br><code>cd /. ssh   #注意.之后有一个空格</code><br><code>ls          #查看当前目录下有那些文件</code><br><code>cat id_rsa.pub</code></p><p>​            注意：第一步输入后要输入三次确定</p><p>​                         最后一步把得到的公钥复制下来</p><p>​            然后打开我们的GitHub——&gt;点击右上角settings——&gt;点击SSH and GPG keys——&gt;点击New SSH key</p><p>​           <img src="https://ftp.bmp.ovh/imgs/2021/01/c7b0e38bc9af7392.png"></p><p>​           然后标题随便取，下面的把我们的公钥粘贴</p><h2 id="七、设置-config-yml文件"><a href="#七、设置-config-yml文件" class="headerlink" title="七、设置_config.yml文件"></a>七、设置_config.yml文件</h2><p>​          切换到我们blog目录下，blog目录下有个文件_config.yml</p><p>,我们打开这个文件</p><p><code>vim _config.yml</code><br><code>#点击a开始输入，拉到文件最下面，修改配置</code><br><code>deploy:</code><br><code>type: git</code><br><code>repository: https://github.com//.github.io.git</code><br><code>branch: master</code></p><p>上面的repository后面填写的地址可以在GitHub上面位置复制</p><p><img src="https://ftp.bmp.ovh/imgs/2021/01/390381eb5d765b86.png"></p><p>​         最后，我们找到文件中url那一栏，删去原有的地址,改为https://你的仓库名称.github.io</p><p>​         点击ESC，shift加: ,输入wq，保存</p><h2 id="八、部署"><a href="#八、部署" class="headerlink" title="八、部署"></a>八、部署</h2><p>​     我们一波三连</p><p><code>hexok cl</code><br><code>hexo g</code><br><code>hexo d   #后面会让你输入你的GitHub账户名和密码</code></p><h4 id="到此为止，我们的博客就搭建好了，我们可以输入https-你的仓库名-github-io来查看你的博客了"><a href="#到此为止，我们的博客就搭建好了，我们可以输入https-你的仓库名-github-io来查看你的博客了" class="headerlink" title="到此为止，我们的博客就搭建好了，我们可以输入https://你的仓库名.github.io来查看你的博客了"></a>到此为止，我们的博客就搭建好了，我们可以输入https://你的仓库名.github.io来查看你的博客了</h4><h2 id="注意：我尝试过很多次，到这一步部署完成没有问题，但是就是打不开我们的博客，显示403，注意下面的修改-重中之重"><a href="#注意：我尝试过很多次，到这一步部署完成没有问题，但是就是打不开我们的博客，显示403，注意下面的修改-重中之重" class="headerlink" title="注意：我尝试过很多次，到这一步部署完成没有问题，但是就是打不开我们的博客，显示403，注意下面的修改(重中之重)"></a>注意：我尝试过很多次，到这一步部署完成没有问题，但是就是打不开我们的博客，显示403，注意下面的修改(重中之重)</h2><p><img src="https://ftp.bmp.ovh/imgs/2021/01/cce58a9f9a49e280.png"></p><p>我们将main改为master，再三连走一波就OK了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 自己动手搭建博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
